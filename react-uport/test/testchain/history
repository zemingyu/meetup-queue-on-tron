
// Load the generated ABI and bytecode
loadScript("Workshop.js");
// Display some information
console.log("RESULT: " + JSON.stringify(workshopOutput));
# Extract the contract ABI
var workshopAbi = JSON.parse(workshopOutput.contracts["Workshop.sol:Workshop"].abi);
# Extract the contract bytecode
var workshopBin = "0x" + workshopOutput.contracts["Workshop.sol:Workshop"].bin;
# Display both values
console.log("RESULT: workshopAbi=" + JSON.stringify(workshopAbi));
console.log("RESULT: workshopBin=" + JSON.stringify(workshopBin));
// -----------------------------------------------------------------------------
var deployWorkshopMessage = "Deploy Workshop";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployWorkshopMessage + " ---");
var workshopContract = web3.eth.contract(workshopAbi);
console.log("RESULT: " + JSON.stringify(workshopContract));
var workshopTx = null;
var workshopAddress = null;
var workshop = workshopContract.new({from: eth.accounts[0], data: workshopBin, gas: 4000000},
  function(e, contract) {
    if (!e) {
      if (!contract.address) {
        workshopTx = contract.transactionHash;
      } else {
        workshopAddress = contract.address;
        console.log("DATA: workshopAddress=" + workshopAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// Display the values of var1 and var2
console.log("RESULT: var1=" + workshop.var1());
console.log("RESULT: var2=" + workshop.var2());
console.log("RESULT: ");
// Load the generated ABI and bytecode
loadScript("Workshop.js");
// Display some information
console.log("RESULT: " + JSON.stringify(workshopOutput));
# Extract the contract ABI
var workshopAbi = JSON.parse(workshopOutput.contracts["Workshop.sol:Workshop"].abi);
# Extract the contract bytecode
var workshopBin = "0x" + workshopOutput.contracts["Workshop.sol:Workshop"].bin;
# Display both values
console.log("RESULT: workshopAbi=" + JSON.stringify(workshopAbi));
console.log("RESULT: workshopBin=" + JSON.stringify(workshopBin));
// -----------------------------------------------------------------------------
var deployWorkshopMessage = "Deploy Workshop";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployWorkshopMessage + " ---");
var workshopContract = web3.eth.contract(workshopAbi);
console.log("RESULT: " + JSON.stringify(workshopContract));
var workshopTx = null;
var workshopAddress = null;
var workshop = workshopContract.new({from: eth.accounts[0], data: workshopBin, gas: 4000000},
  function(e, contract) {
    if (!e) {
      if (!contract.address) {
        workshopTx = contract.transactionHash;
      } else {
        workshopAddress = contract.address;
        console.log("DATA: workshopAddress=" + workshopAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// Display the values of var1 and var2
console.log("RESULT: var1=" + workshop.var1());
console.log("RESULT: var2=" + workshop.var2());
console.log("RESULT: ");
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
// console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
//console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.getUser(1));
meetupBase.createUser("A", {from: eth.accounts[0], gas:4000000, gasPrice:100});
//meetupBase.createUser("B", {from: eth.accounts[1], gas:4000000, gasPrice:100});
//meetupBase.createUser("C", {from: eth.accounts[2], gas:4000000, gasPrice:100});
//meetupBase.createUser("D", {from: eth.accounts[3], gas:4000000, gasPrice:100});
//meetupBase.createUser("E", {from: eth.accounts[4], gas:4000000, gasPrice:100});
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.getUser(1));
//console.log("RESULT: users(2)=" + meetupBase.getUser(2));
// -----------------------------------------------------------------------------
//var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + checkMeetupMessage + " ---");
//console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
// console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Register users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
//console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.getUser(1));
meetupBase.createUser(web3.toAscii("A"), {from: eth.accounts[0], gas:4000000, gasPrice:100});
//meetupBase.createUser("B", {from: eth.accounts[1], gas:4000000, gasPrice:100});
//meetupBase.createUser("C", {from: eth.accounts[2], gas:4000000, gasPrice:100});
//meetupBase.createUser("D", {from: eth.accounts[3], gas:4000000, gasPrice:100});
//meetupBase.createUser("E", {from: eth.accounts[4], gas:4000000, gasPrice:100});
console.log("RESULT: users(0)=" + meetupBase.getUser(0));
//console.log("RESULT: users(1)=" + meetupBase.getUser(1));
//console.log("RESULT: users(2)=" + meetupBase.getUser(2));
// -----------------------------------------------------------------------------
//var checkMeetupMessage = "Check meetups";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + checkMeetupMessage + " ---");
//console.log("RESULT: meetups.length=" + meetupBase.getMeetupCount())
// Display the values of var1 and var2
//console.log("RESULT: var1=" + meetupBase.var1());
//console.log("RESULT: var2=" + meetupBase.var2());
//console.log("RESULT: ");
// -----------------------------------------------------------------------------
var modifyVarssMessage = "Modifying Vars";
// -----------------------------------------------------------------------------
//console.log("RESULT: --- " + modifyVarssMessage + " ---");
//var modifyVars1Tx = MeetupBase.setVar1("Hello, World!4567890123456789012345", {from: eth.accounts[0], gas: 100000});
//var modifyVars2Tx = MeetupBase.setVar2(456, {from: eth.accounts[0], gas: 100000});
//while (txpool.status.pending > 0) {
//}
// Display the transaction status
//console.log("RESULT: modifyVars1Tx=" + JSON.stringify(eth.getTransaction(modifyVars1Tx)));
//console.log("RESULT: modifyVars1TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars1Tx)));
//console.log("RESULT: modifyVars2Tx=" + JSON.stringify(eth.getTransaction(modifyVars2Tx)));
//console.log("RESULT: modifyVars2TxReceipt=" + JSON.stringify(eth.getTransactionReceipt(modifyVars2Tx)));
// Display the new values of var1 and var2
//console.log("RESULT: var1=" + MeetupBase.var1());
//console.log("RESULT: var2=" + MeetupBase.var2());
//console.log("RESULT: ");
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
web3.toAscii("A")
web3.fromAscii("A")
eth.getTransaction("0xc4289ba9e45fae68c766307aff63832c0e0e83c40bd979f2bbbfde28c5e97352")
eth.accounts[0]
meetupBase
eth.getTransaction("0xc65565f40498d4ebebce259385df248e2e86063edaefd372d5f4a3e6647a79a5")
eth.blockNumber
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member1"), {from: eth.accounts[2], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member2"), {from: eth.accounts[3], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(web3.fromAscii("Member3"), {from: eth.accounts[4], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {   
  console.log("RESULT: " + i + " | Name: "+web3.toAscii(meetupBase.users(i)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.users(i)[0])  +
            " | Address: " + meetupBase.users(i)[1]);
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenter IDs: " + meetupBase.getMeetup(i)[4] +
          " | Registered User IDs: " + meetupBase.getMeetup(i)[5]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {     
  console.log("RESULT: " + i + 
            " | Address: " + meetupBase.userIndex(i) +
            " | Name: "+web3.toAscii(meetupBase.userEntries[meetupBase.userIndex(i)][2])+
            " | Creation Time: " + timestampToStr(meetupBase[meetupBase.userIndex(i)][3])  +
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenter IDs: " + meetupBase.getMeetup(i)[4] +
          " | Registered User IDs: " + meetupBase.getMeetup(i)[5]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {     
  console.log("RESULT: " + i + 
            " | Address: " + meetupBase.userIndex(i) +
            " | Name: "+web3.toAscii(meetupBase.userEntries[meetupBase.userIndex(i)][2])+
            " | Creation Time: " + timestampToStr(meetupBase[meetupBase.userIndex(i)][3])  +
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenter IDs: " + meetupBase.getMeetup(i)[4] +
          " | Registered User IDs: " + meetupBase.getMeetup(i)[5]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {     
  console.log("RESULT: " + i + 
            " | Address: " + meetupBase.userIndex(i) +
            " | Name: "+web3.toAscii(meetupBase.userEntries[meetupBase.userIndex(i)][2])+
            " | Creation Time: " + timestampToStr(meetupBase[meetupBase.userIndex(i)][3])  +
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenter IDs: " + meetupBase.getMeetup(i)[4] +
          " | Registered User IDs: " + meetupBase.getMeetup(i)[5]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {     
  console.log("RESULT: " + i + 
            " | Address: " + meetupBase.userIndex(i) +
            " | Name: "+web3.toAscii(meetupBase.userEntries[meetupBase.userIndex(i)][2])+
            " | Creation Time: " + timestampToStr(meetupBase[meetupBase.userIndex(i)][3])  +
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenter IDs: " + meetupBase.getMeetup(i)[4] +
          " | Registered User IDs: " + meetupBase.getMeetup(i)[5]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {     
  console.log("RESULT: " + i + 
            " | Address: " + meetupBase.userIndex(i) +
            " | Name: "+web3.toAscii(meetupBase.userEntries[meetupBase.userIndex(i)][2])+
            " | Creation Time: " + timestampToStr(meetupBase[meetupBase.userIndex(i)][3])  +
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenter IDs: " + meetupBase.getMeetup(i)[4] +
          " | Registered User IDs: " + meetupBase.getMeetup(i)[5]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {     
  console.log("RESULT: " + i + 
            " | Address: " + meetupBase.userIndex(i) +
            " | Name: "+web3.toAscii(meetupBase.userEntries[meetupBase.userIndex(i)][2])+
            " | Creation Time: " + timestampToStr(meetupBase[meetupBase.userIndex(i)][3])  +
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenter IDs: " + meetupBase.getMeetup(i)[4] +
          " | Registered User IDs: " + meetupBase.getMeetup(i)[5]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {     
  console.log("RESULT: " + i + 
            " | Address: " + meetupBase.userIndex(i) +
            " | Name: "+web3.toAscii(meetupBase.userEntries[meetupBase.userIndex(i)][2])+
            " | Creation Time: " + timestampToStr(meetupBase[meetupBase.userIndex(i)][3])  +
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 100, "Smart contract 101", [3, 4], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenter IDs: " + meetupBase.getMeetup(i)[4] +
          " | Registered User IDs: " + meetupBase.getMeetup(i)[5]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {     
  console.log("RESULT: " + i + 
            " | Address: " + meetupBase.userIndex(i) +
            " | Name: "+web3.toAscii(meetupBase.userEntries[meetupBase.userIndex(i)][2])+
            " | Creation Time: " + timestampToStr(meetupBase[meetupBase.userIndex(i)][3])  +
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 10, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Topic: " + meetupBase.getMeetup(i)[3] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[4] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[5]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {     
  console.log("RESULT: " + i + 
            " | Address: " + meetupBase.userIndex(i) +
            " | Name: "+web3.toAscii(meetupBase.userEntries[meetupBase.userIndex(i)][2])+
            " | Creation Time: " + timestampToStr(meetupBase[meetupBase.userIndex(i)][3])  +
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 10, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.meetups(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.meetups(i)[1])  +
          " | Max Capacity: " + meetupBase.meetups(i)[2] + 
          " | Topic: " + meetupBase.meetups(i)[3] + 
          " | Presenter Addresses: " + meetupBase.meetups(i)[4] +
          " | Registered User Addresses: " + meetupBase.meetups(i)[5]);
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {     
  cosole.log(meetupBase.userIndex(i));
  console.log(meetupBase.userEntries[meetupBase.userIndex(i)]);
  console.log("RESULT: " + i + 
            " | Address: " + meetupBase.userIndex(i) +
            " | Name: "+web3.toAscii(meetupBase.userEntries[meetupBase.userIndex(i)][2])+
            " | Creation Time: " + timestampToStr(meetupBase[meetupBase.userIndex(i)][3])  +
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 10, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.meetups(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.meetups(i)[1])  +
          " | Max Capacity: " + meetupBase.meetups(i)[2] + 
          " | Topic: " + meetupBase.meetups(i)[3] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[4] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[5]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 5; i++) {     
  cosole.log(meetupBase.userIndex(i));
  while (txpool.status.pending > 0) {
  }
  console.log(meetupBase.userEntries[meetupBase.userIndex(i)]);
  console.log("RESULT: " + i + 
            " | Address: " + meetupBase.userIndex(i) +
            " | Name: "+web3.toAscii(meetupBase.userEntries[meetupBase.userIndex(i)][2])+
            " | Creation Time: " + timestampToStr(meetupBase[meetupBase.userIndex(i)][3])  +
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 10, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.meetups(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.meetups(i)[1])  +
          " | Max Capacity: " + meetupBase.meetups(i)[2] + 
          " | Topic: " + meetupBase.meetups(i)[3] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[4] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[5]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
console.log(meetupBase.getUserData(eth.accounts[0]));
console.log(meetupBase.userIndex(0));
for (i = 0; i < 5; i++) {     
  cosole.log(meetupBase.userIndex(i));
  while (txpool.status.pending > 0) {
  }
  console.log(meetupBase.userEntries[meetupBase.userIndex(i)]);
  console.log("RESULT: " + i + 
            " | Address: " + meetupBase.userIndex(i) +
            " | Name: "+web3.toAscii(meetupBase.userEntries[meetupBase.userIndex(i)][2])+
            " | Creation Time: " + timestampToStr(meetupBase[meetupBase.userIndex(i)][3])  +
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 10, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.meetups(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.meetups(i)[1])  +
          " | Max Capacity: " + meetupBase.meetups(i)[2] + 
          " | Topic: " + meetupBase.meetups(i)[3] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[4] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[5]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
console.log(meetupBase.getUserData(eth.accounts[0]));
console.log(meetupBase.userIndex(0));
console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
for (i = 0; i < 5; i++) {     
  cosole.log(meetupBase.userIndex(i));
  while (txpool.status.pending > 0) {
  }
  console.log(meetupBase.userEntries[meetupBase.userIndex(i)]);
  console.log("RESULT: " + i + 
            " | Address: " + meetupBase.userIndex(i) +
            " | Name: "+web3.toAscii(meetupBase.userEntries[meetupBase.userIndex(i)][2])+
            " | Creation Time: " + timestampToStr(meetupBase[meetupBase.userIndex(i)][3])  +
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 10, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.meetups(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.meetups(i)[1])  +
          " | Max Capacity: " + meetupBase.meetups(i)[2] + 
          " | Topic: " + meetupBase.meetups(i)[3] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[4] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[5]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 5; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[2][3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 10, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.meetups(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.meetups(i)[1])  +
          " | Max Capacity: " + meetupBase.meetups(i)[2] + 
          " | Topic: " + meetupBase.meetups(i)[3] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[4] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[5]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 5; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[2][3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 10, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.meetups(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.meetups(i)[1])  +
          " | Max Capacity: " + meetupBase.meetups(i)[2] + 
          " | Topic: " + meetupBase.meetups(i)[3] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[4] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[5]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 5; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[2][3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 10, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.meetups(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.meetups(i)[1])  +
          " | Max Capacity: " + meetupBase.meetups(i)[2] + 
          " | Topic: " + meetupBase.meetups(i)[3] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[4] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[5]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 5; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[2][3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 10, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.meetups(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.meetups(i)[1])  +
          " | Max Capacity: " + meetupBase.meetups(i)[2] + 
          " | Topic: " + meetupBase.meetups(i)[3] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[4] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[5]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 5; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[2][3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 10, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.meetups(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.meetups(i)[1])  +
          " | Max Capacity: " + meetupBase.meetups(i)[2] + 
          " | Topic: " + meetupBase.meetups(i)[3] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[4] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[5]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 5; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 10, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.meetups(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.meetups(i)[1])  +
          " | Max Capacity: " + meetupBase.meetups(i)[2] + 
          " | Topic: " + meetupBase.meetups(i)[3] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[4] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[5]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var checkMeetupMessage = "Create meetups";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.meetups(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.meetups(i)[1])  +
          " | Max Capacity: " + meetupBase.meetups(i)[2] + 
          " | Topic: " + meetupBase.meetups(i)[3] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[4] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[5]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.meetups(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.meetups(i)[1])  +
          " | Max Capacity: " + meetupBase.meetups(i)[2] + 
          " | Remaining Capacity: " + meetupBase.meetups(i)[3] + 
          " | Topic: " + meetupBase.meetups(i)[4] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[5] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[6]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// -----------------------------------------------------------------------------
var registerMessage = "User registers for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.meetups(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.meetups(i)[1])  +
          " | Max Capacity: " + meetupBase.meetups(i)[2] + 
          " | Remaining Capacity: " + meetupBase.meetups(i)[3] + 
          " | Topic: " + meetupBase.meetups(i)[4] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[5] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[6]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// -----------------------------------------------------------------------------
var registerMessage = "User registers for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.meetups(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.meetups(i)[1])  +
          " | Max Capacity: " + meetupBase.meetups(i)[2] + 
          " | Remaining Capacity: " + meetupBase.meetups(i)[3] + 
          " | Topic: " + meetupBase.meetups(i)[4] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[5] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[6]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// -----------------------------------------------------------------------------
var registerMessage = "User registers for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Remaining Capacity: " + meetupBase.getMeetup(i)[3] + 
          " | Topic: " + meetupBase.getMeetup(i)[4] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[5] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[6]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// -----------------------------------------------------------------------------
var registerMessage = "User registers for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Remaining Capacity: " + meetupBase.getMeetup(i)[3] + 
          " | Topic: " + meetupBase.getMeetup(i)[4] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[5] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[6]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// -----------------------------------------------------------------------------
var registerMessage = "User registers for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Remaining Capacity: " + meetupBase.getMeetup(i)[3] + 
          " | Topic: " + meetupBase.getMeetup(i)[4] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[5] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[6]);
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Remaining Capacity: " + meetupBase.getMeetup(i)[3] + 
          " | Topic: " + meetupBase.getMeetup(i)[4] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[5] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[6]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// -----------------------------------------------------------------------------
var registerMessage = "User registers for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Remaining Capacity: " + meetupBase.getMeetup(i)[3] + 
          " | Topic: " + meetupBase.getMeetup(i)[4] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[5] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[6]);
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Remaining Capacity: " + meetupBase.getMeetup(i)[3] + 
          " | Topic: " + meetupBase.getMeetup(i)[4] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[5] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[6]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// -----------------------------------------------------------------------------
var registerMessage = "User registers for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Remaining Capacity: " + meetupBase.getMeetup(i)[3] + 
          " | Topic: " + meetupBase.getMeetup(i)[4] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[5] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[6]);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Remaining Capacity: " + meetupBase.getMeetup(i)[3] + 
          " | Topic: " + meetupBase.getMeetup(i)[4] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[5] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[6]);
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Remaining Capacity: " + meetupBase.getMeetup(i)[3] + 
          " | Topic: " + meetupBase.getMeetup(i)[4] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[5] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[6]);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
// -----------------------------------------------------------------------------
var registerMessage = "User registers for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Remaining Capacity: " + meetupBase.getMeetup(i)[3] + 
          " | Topic: " + meetupBase.getMeetup(i)[4] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[5] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[6]);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
var i = 0;
console.log("RESULT: Meetup #" + (i+1) + 
          " | Creation Time: " + timestampToStr(meetupBase.getMeetup(i)[0])  +
          " | Start Time: " + timestampToStr(meetupBase.getMeetup(i)[1])  +
          " | Max Capacity: " + meetupBase.getMeetup(i)[2] + 
          " | Remaining Capacity: " + meetupBase.getMeetup(i)[3] + 
          " | Topic: " + meetupBase.getMeetup(i)[4] + 
          " | Presenter Addresses: " + meetupBase.getMeetup(i)[5] +
          " | Registered User Addresses: " + meetupBase.getMeetup(i)[6]);
eth.blockNumber
eth.getTransactionReceipt("0x8ff7c5e76e55daaca1d87cf9328aae23dc3c1a034b370a22387956111beb718c"
)
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
console.log(eth.getTransaction(txFutureEvent));
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
console.log("RESULT: Cannot create an event in the past");
txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
console.log(eth.getTransaction(txPastEvent));
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
console.log(eth.getTransactionReceipt(txFutureEvent));
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
console.log("RESULT: Cannot create an event in the past");
txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
console.log(eth.getTransactionReceipt(txPastEvent));
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
eth.getTransactionReceipt(txFutureEvent);
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
console.log("RESULT: Cannot create an event in the past");
txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
eth.getTransactionReceipt(txPastEvent);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
eth.getTransactionReceipt(txFutureEvent);
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
console.log("RESULT: Cannot create an event in the past");
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
eth.getTransactionReceipt(txPastEvent);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
console.log("RESULT: Cannot create an event in the past");
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
console.log("RESULT: Cannot create an event in the past");
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
console.log(txFutureEvent);
//failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
while (txpool.status.pending > 0) {
}
//console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//console.log("RESULT: Cannot create an event in the past");
//var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
//passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
//getMeetupDetails(0);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
eth.getTransactionReceipt(meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000}))
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
eth.getTransactionReceipt(txFutureEvent);
console.log(txFutureEvent);
//failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
while (txpool.status.pending > 0) {
}
//console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//console.log("RESULT: Cannot create an event in the past");
//var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
//passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
//getMeetupDetails(0);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
console.log("DEBUG 1")
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
console.log("DEBUG 2")
eth.getTransactionReceipt(meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000}))
console.log("DEBUG 3")
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
console.log("DEBUG 4")
eth.getTransactionReceipt(txFutureEvent);
console.log("DEBUG 5")
console.log(txFutureEvent);
//failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
while (txpool.status.pending > 0) {
}
//console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//console.log("RESULT: Cannot create an event in the past");
//var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
//passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
//getMeetupDetails(0);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
console.log("DEBUG 1")
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
console.log("DEBUG 2")
eth.getTransactionReceipt(meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000}))
console.log("DEBUG 3")
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
console.log("DEBUG 4")
eth.getTransactionReceipt(String(txFutureEvent));
console.log("DEBUG 5")
console.log(txFutureEvent);
//failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
while (txpool.status.pending > 0) {
}
//console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//console.log("RESULT: Cannot create an event in the past");
//var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
//passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
//getMeetupDetails(0);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
console.log("DEBUG 1")
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
console.log("DEBUG 2")
eth.getTransactionReceipt(meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000}))
console.log("DEBUG 3")
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
console.log("DEBUG 4")
eth.getTransactionReceipt(String(txFutureEvent));
console.log("DEBUG 5")
console.log(txFutureEvent);
function typeOf(obj) {
  return {}.toString.call(obj).split(' ')[1].slice(0, -1).toLowerCase();
}
typeof(txFutureEvent);
//failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
while (txpool.status.pending > 0) {
}
//console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//console.log("RESULT: Cannot create an event in the past");
//var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
//passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
//getMeetupDetails(0);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
console.log("DEBUG 1")
meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
console.log("DEBUG 2")
eth.getTransactionReceipt(meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000}))
console.log("DEBUG 3")
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("DEBUG 4")
eth.getTransactionReceipt(txFutureEvent);
console.log("DEBUG 5")
console.log(txFutureEvent);
function typeOf(obj) {
  return {}.toString.call(obj).split(' ')[1].slice(0, -1).toLowerCase();
}
typeof(txFutureEvent);
//failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
//console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
//console.log("RESULT: Cannot create an event in the past");
//var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
//passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
//getMeetupDetails(0);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
//console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
//getMeetupDetails(0);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
//console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
//getMeetupDetails(0);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
printBalances();
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
//console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
//getMeetupDetails(0);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[0], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[0]), "ether") + " ETH");
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[0], web3.fromAscii("Organiser"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Assistant"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Member1"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member2"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member3"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member4"), {from: eth.accounts[0], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member5"), {from: eth.accounts[0], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[0]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
printBalances();
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
//console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
//getMeetupDetails(0);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
printBalances();
meetupBase.registerForMeetup(0, {from: eth.accounts[0], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
printBalances();
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
printBalances();
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
printBalances();
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
//console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
//getMeetupDetails(0);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
printBalances();
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
printBalances();
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
printBalances();
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
printBalances();
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
//console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
//getMeetupDetails(0);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
printBalances();
meetupBase.registerForMeetup(0, {from: eth.accounts[5], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
printBalances();
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
printBalances();
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[2] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
printBalances();
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
//console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
//getMeetupDetails(0);
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
printBalances();
meetupBase.registerForMeetup(0, {from: eth.accounts[5], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
printBalances();
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
printBalances();
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[4] + " attend the event? " + meetupBase.checkIn(eth.accounts[4], 0));
console.log("RESULT: Could the user " + eth.accounts[5] + " attend the event? " + meetupBase.checkIn(eth.accounts[5], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
console.log("RESULT: Could the user " + eth.accounts[2] + " attend the event? " + meetupBase.checkIn(eth.accounts[2], 0));
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
printBalances();
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[5], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[4] + " attend the event? " + meetupBase.checkIn(eth.accounts[4], 0));
console.log("RESULT: Could the user " + eth.accounts[5] + " attend the event? " + meetupBase.checkIn(eth.accounts[5], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
console.log("RESULT: Could the user " + eth.accounts[2] + " attend the event? " + meetupBase.checkIn(eth.accounts[2], 0));
printBalances();
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
printBalances();
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[5], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[4] + " attend the event? " + meetupBase.checkIn(eth.accounts[4], 0));
console.log("RESULT: Could the user " + eth.accounts[5] + " attend the event? " + meetupBase.checkIn(eth.accounts[5], 0));
console.log("RESULT: Could the user " + eth.accounts[1] + " attend the event? " + meetupBase.checkIn(eth.accounts[1], 0));
console.log("RESULT: Could the user " + eth.accounts[2] + " attend the event? " + meetupBase.checkIn(eth.accounts[2], 0));
printBalances();
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
printBalances();
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup and register account 3 and 4 as presenters";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event - account 5";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[5], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list - account 6";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[6], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: Could the user " + eth.accounts[2] + " attend the event? " + meetupBase.checkIn(eth.accounts[2], 0));
console.log("RESULT: Could the user " + eth.accounts[3] + " attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: Could the user " + eth.accounts[4] + " attend the event? " + meetupBase.checkIn(eth.accounts[4], 0));
console.log("RESULT: Could the user " + eth.accounts[5] + " attend the event? " + meetupBase.checkIn(eth.accounts[5], 0));
console.log("RESULT: Could the user " + eth.accounts[6] + " attend the event? " + meetupBase.checkIn(eth.accounts[6], 0));
printBalances();
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
printBalances();
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup and register account 3 and 4 as presenters";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event - account 5";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[5], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list - account 6";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[6], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: User " + eth.accounts[2] + " can attend the event? " + meetupBase.checkIn(eth.accounts[2], 0));
console.log("RESULT: User " + eth.accounts[3] + " can attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: User " + eth.accounts[4] + " can attend the event? " + meetupBase.checkIn(eth.accounts[4], 0));
console.log("RESULT: User " + eth.accounts[5] + " can attend the event? " + meetupBase.checkIn(eth.accounts[5], 0));
console.log("RESULT: User " + eth.accounts[6] + " can attend the event? " + meetupBase.checkIn(eth.accounts[6], 0));
printBalances();
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
printBalances();
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup and register account 3 and 4 as presenters";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event - account 5";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[5], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list - account 6";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[6], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: User " + eth.accounts[2] + " can attend the event? " + meetupBase.checkIn(eth.accounts[2], 0));
console.log("RESULT: User " + eth.accounts[3] + " can attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: User " + eth.accounts[4] + " can attend the event? " + meetupBase.checkIn(eth.accounts[4], 0));
console.log("RESULT: User " + eth.accounts[5] + " can attend the event? " + meetupBase.checkIn(eth.accounts[5], 0));
console.log("RESULT: User " + eth.accounts[6] + " can attend the event? " + meetupBase.checkIn(eth.accounts[6], 0));
printBalances();
// -----------------------------------------------------------------------------
var removeUserMessage = "Remove account 2 as a user";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + removeUserMessage + " ---");
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
printBalances();
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup and register account 3 and 4 as presenters";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event - account 5";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[5], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list - account 6";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[6], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: User " + eth.accounts[2] + " can attend the event? " + meetupBase.checkIn(eth.accounts[2], 0));
console.log("RESULT: User " + eth.accounts[3] + " can attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: User " + eth.accounts[4] + " can attend the event? " + meetupBase.checkIn(eth.accounts[4], 0));
console.log("RESULT: User " + eth.accounts[5] + " can attend the event? " + meetupBase.checkIn(eth.accounts[5], 0));
console.log("RESULT: User " + eth.accounts[6] + " can attend the event? " + meetupBase.checkIn(eth.accounts[6], 0));
printBalances();
// -----------------------------------------------------------------------------
var removeUserMessage = "Remove account 2 as a user";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + removeUserMessage + " ---");
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
printBalances();
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup and register account 3 and 4 as presenters";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event - account 5";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[5], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list - account 6";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[6], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: User " + eth.accounts[2] + " can attend the event? " + meetupBase.checkIn(eth.accounts[2], 0));
console.log("RESULT: User " + eth.accounts[3] + " can attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: User " + eth.accounts[4] + " can attend the event? " + meetupBase.checkIn(eth.accounts[4], 0));
console.log("RESULT: User " + eth.accounts[5] + " can attend the event? " + meetupBase.checkIn(eth.accounts[5], 0));
console.log("RESULT: User " + eth.accounts[6] + " can attend the event? " + meetupBase.checkIn(eth.accounts[6], 0));
printBalances();
// -----------------------------------------------------------------------------
var removeUserMessage = "Remove account 2 as a user";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + removeUserMessage + " ---");
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
printBalances();
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup and register account 3 and 4 as presenters";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event - account 5";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[5], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list - account 6";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[6], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
console.log("RESULT: User " + eth.accounts[2] + " can attend the event? " + meetupBase.checkIn(eth.accounts[2], 0));
console.log("RESULT: User " + eth.accounts[3] + " can attend the event? " + meetupBase.checkIn(eth.accounts[3], 0));
console.log("RESULT: User " + eth.accounts[4] + " can attend the event? " + meetupBase.checkIn(eth.accounts[4], 0));
console.log("RESULT: User " + eth.accounts[5] + " can attend the event? " + meetupBase.checkIn(eth.accounts[5], 0));
console.log("RESULT: User " + eth.accounts[6] + " can attend the event? " + meetupBase.checkIn(eth.accounts[6], 0));
printBalances();
// -----------------------------------------------------------------------------
var removeUserMessage = "Remove account 2 as a user";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + removeUserMessage + " ---");
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
printBalances();
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup and register account 3 and 4 as presenters";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event - account 5";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[5], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list - account 6";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[6], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
for (i = 2; i < 6; i++) {
  console.log("RESULT: User " + eth.accounts[i] + " can attend the event? " + meetupBase.checkIn(eth.accounts[i], 0));  
}
printBalances();
// -----------------------------------------------------------------------------
var removeUserMessage = "Remove account 2 as a user";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + removeUserMessage + " ---");
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
printBalances();
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup and register account 3 and 4 as presenters";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event - account 5";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[5], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list - account 6";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[6], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
for (i = 2; i < 7; i++) {
  console.log("RESULT: User " + eth.accounts[i] + " can attend the event? " + meetupBase.checkIn(eth.accounts[i], 0));  
}
printBalances();
// -----------------------------------------------------------------------------
var removeUserMessage = "Remove account 2 as a user";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + removeUserMessage + " ---");
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
printBalances();
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup and register account 3 and 4 as presenters";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event - account 5";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[5], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list - account 6";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[6], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
for (i = 2; i < 7; i++) {
  console.log("RESULT: User " + eth.accounts[i] + " can attend the event? " + meetupBase.checkIn(eth.accounts[i], 0));  
}
printBalances();
// -----------------------------------------------------------------------------
var removeUserMessage = "Remove account 2 as a user";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + removeUserMessage + " ---");
console.log("RESULT: Before removing user: users.length=" + meetupBase.getUserCount());
meetupBase.removeUser(eth.accounts[2], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After removing user: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
printBalances();
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
for (i = 0; i < 6; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
printBalances();
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup and register account 3 and 4 as presenters";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event - account 5";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[5], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list - account 6";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[6], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
for (i = 2; i < 7; i++) {
  console.log("RESULT: User " + eth.accounts[i] + " can attend the event? " + meetupBase.checkIn(eth.accounts[i], 0));  
}
printBalances();
// -----------------------------------------------------------------------------
var removeUserMessage = "Remove account 2 as a user";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + removeUserMessage + " ---");
console.log("RESULT: Before removing user: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 7; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
meetupBase.removeUser(eth.accounts[2], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After removing user: users.length=" + meetupBase.getUserCount());
for (i = 0; i < 7; i++) {     
  userAddress = meetupBase.userIndex(i);
  console.log("RESULT: " + i + 
            " | Address: " + userAddress +
            " | Exists: " + meetupBase.getUserData(userAddress)[0] +
            " | Index: " + meetupBase.getUserData(userAddress)[1] +
            " | Name: "+web3.toAscii(meetupBase.getUserData(userAddress)[2])+
            " | Creation Time: " + timestampToStr(meetupBase.getUserData(userAddress)[3])
            );
}
printBalances();
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
printUsers()
printBalances();
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup and register account 3 and 4 as presenters";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event - account 5";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[5], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list - account 6";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[6], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
for (i = 2; i < 7; i++) {
  console.log("RESULT: User " + eth.accounts[i] + " can attend the event? " + meetupBase.checkIn(eth.accounts[i], 0));  
}
printBalances();
// -----------------------------------------------------------------------------
var removeUserMessage = "Remove account 2 as a user";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + removeUserMessage + " ---");
console.log("RESULT: Before removing user: users.length=" + meetupBase.getUserCount());
printUsers()
meetupBase.removeUser(eth.accounts[2], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After removing user: users.length=" + meetupBase.getUserCount());
printUsers()
// -----------------------------------------------------------------------------
var removeUserMessage = "Remove account 2 as a user";
// -----------------------------------------------------------------------------
printBalances();
//geth --datadir ./testchain attach << EOF
// Load the generated ABI and bytecode
loadScript("MeetupBase.js");
// Load accounts with eth
loadScript("functions.js");
unlockAccounts("");
// Display some information
//console.log("RESULT: " + JSON.stringify(meetupBaseOutput));
// Extract the contract ABI
var meetupBaseAbi = JSON.parse(meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].abi);
// Extract the contract bytecode
var meetupBaseBin = "0x" + meetupBaseOutput.contracts["MeetupBase_Simple.sol:MeetupBase"].bin;
// Display both values
//console.log("RESULT: meetupBaseAbi=" + JSON.stringify(meetupBaseAbi));
//console.log("RESULT: meetupBaseBin=" + JSON.stringify(meetupBaseBin));
// -----------------------------------------------------------------------------
var deployMeetupBaseMessage = "Deploy MeetupBase";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + deployMeetupBaseMessage + " ---");
var meetupBaseContract = web3.eth.contract(meetupBaseAbi);
//console.log("RESULT: " + JSON.stringify(meetupBaseContract));
var meetupBaseTx = null;
var meetupBaseAddress = null;
var meetupBase = meetupBaseContract.new({from: eth.accounts[1], data: meetupBaseBin, gas: 4000000},
  function(e, contract) {
    console.log(e);
    if (!e) {
      if (!contract.address) {
        meetupBaseTx = contract.transactionHash;
      } else {
        meetupBaseAddress = contract.address;
        console.log("DATA: meetupBaseAddress=" + meetupBaseAddress);
      }
    }
  }
);
// Wait until there are no pending transactions in the txpool
while (txpool.status.pending > 0) {
}
// console.log("RESULT: meetupBase=" + JSON.stringify(meetupBase));
// console.log("RESULT: meetupBase=" + JSON.stringify(eth.getTransaction(meetupBaseTx)));
//console.log("RESULT: balance: " + web3.fromWei(eth.getBalance(eth.accounts[1]), "ether") + " ETH");
// -----------------------------------------------------------------------------
var registerUserMessage = "Create users";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerUserMessage + " ---");
console.log("RESULT: Before creating users: users.length=" + meetupBase.getUserCount());
meetupBase.createUser(eth.accounts[1], web3.fromAscii("Organiser"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[2], web3.fromAscii("Assistant"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[3], web3.fromAscii("Member1"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[4], web3.fromAscii("Member2"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[5], web3.fromAscii("Member3"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[6], web3.fromAscii("Member4"), {from: eth.accounts[1], gas:700000});
meetupBase.createUser(eth.accounts[7], web3.fromAscii("Member5"), {from: eth.accounts[1], gas:700000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After creating users: users.length=" + meetupBase.getUserCount());
//console.log(meetupBase.getUserData(eth.accounts[1]));
//console.log(meetupBase.userIndex(0));
//console.log(meetupBase.getUserData(meetupBase.userIndex(0)));
var userAddress = null;
printUsers()
printBalances();
// -----------------------------------------------------------------------------
var testDatesMessage = "Test dates";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + testDatesMessage + " ---");
date = 1525696722;
timestampToStr(date);
dateTimeStr = "Wed, 01 Aug 2018 18:00:00 AEST";
dateTimeStrPast = "Tue, 15 May 2018 09:36:00 AEST";
strToTimestamp(dateTimeStr);
// -----------------------------------------------------------------------------
var createMeetupMessage = "Create a meetup and register account 3 and 4 as presenters";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + createMeetupMessage + " ---");
console.log("RESULT: Before creating meetups: meetups.length=" + meetupBase.getMeetupCount());
var txFutureEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStr), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
var txPastEvent = meetupBase.createMeetup(strToTimestamp(dateTimeStrPast), 3, "Smart contract 101", [eth.accounts[3], eth.accounts[4]], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
// Must use getMeetup function to obtain arrays
//eth.sendTransaction({from: eth.accounts[1], to: eth.accounts[1], value: web3.toWei(1234, "ether")})
failIfTxStatusError(txFutureEvent, " - it can create a meetup in the future - Expecting success");
passIfTxStatusError(txPastEvent, " - it cannot create a meetup in the past - Expecting failure");
console.log("RESULT: After creating meetups: meetups.length=" + meetupBase.getMeetupCount());
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var registerMessage = "User can register for a meetup event - account 5";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + registerMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[5], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var overRegisterMessage = "Once full, the user cannot register anymore, but can go onto a waiting list - account 6";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + overRegisterMessage + " ---");
meetupBase.registerForMeetup(0, {from: eth.accounts[6], gas: 4000000});
while (txpool.status.pending > 0) {
}
getMeetupDetails(0);
printBalances();
// -----------------------------------------------------------------------------
var checkInMessage = "Check if a user can attend the event";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + checkInMessage + " ---");
for (i = 2; i < 7; i++) {
  console.log("RESULT: User " + eth.accounts[i] + " can attend the event? " + meetupBase.checkIn(eth.accounts[i], 0));  
}
printBalances();
// -----------------------------------------------------------------------------
var removeUserMessage = "Remove account 2 as a user";
// -----------------------------------------------------------------------------
console.log("RESULT: --- " + removeUserMessage + " ---");
console.log("RESULT: Before removing user: users.length=" + meetupBase.getUserCount());
printUsers()
meetupBase.removeUser(eth.accounts[2], {from: eth.accounts[1], gas: 4000000});
while (txpool.status.pending > 0) {
}
console.log("RESULT: After removing user: users.length=" + meetupBase.getUserCount());
printUsers()
// -----------------------------------------------------------------------------
var deregisterForEventMessage = "User deregisteres for an event - if on registration list, move one person from the waiting list";
// -----------------------------------------------------------------------------
printBalances();